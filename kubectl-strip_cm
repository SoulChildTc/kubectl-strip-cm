#!/bin/bash
version="v0.0.1"
kubectl="kubectl"
cm_name=""
force=0
temp_dir=/tmp/${RANDOM}_stripcm
from_file_params=""
mkdir ${temp_dir}

while [ $# -gt 0 ]; do
  key="${1}"

  case ${key} in
  -v | --version)
    echo "kubectl stripcm: ${version}"
    exit 0
    ;;
  --context)
    kubectl="$kubectl --context ${2}"
    shift
    shift
    ;;
  --kubecontext=*)
    kubectl="$kubectl --context=${key##*=}"
    shift
    ;;
  --kubeconfig)
    kubectl="$kubectl --kubeconfig ${2}"
    shift
    shift
    ;;
  --kubeconfig=*)
    kubectl="$kubectl --kubeconfig=${key##*=}"
    shift
    ;;
  -n | --namespace)
    kubectl="$kubectl --namespace ${2}"
    shift
    shift
    ;;
  --namespace=*)
    kubectl="$kubectl --namespace=${key##*=}"
    shift
    ;;
  -f | --force)
    force=1
    shift
    ;;
  --)
    shift
    break
    ;;
  *)
    if [ -z "${cm_name}" ]; then
      cm_name="${1}"
      shift
    else
      echo "exactly one configmap name required"
      exit 1
    fi
    ;;
  esac
done

labels=$(${kubectl} get cm ${cm_name} -o go-template='{{printf "  labels:"}}{{range $k, $v := .metadata.labels}}{{printf "\n"}}    {{$k}}: {{printf "| \n      "}}{{$v}}{{end}}')
annotations=$(${kubectl} get cm ${cm_name} -o go-template='{{printf "  annotations:"}}{{range $k, $v := .metadata.annotations}}{{printf "\n"}}    {{$k}}: {{printf "| \n      "}}{{$v}}{{end}}')
files=$(${kubectl} get cm ${cm_name} -o go-template='{{range $filename,$_ := .data}}{{$filename}}{{print "\n"}}{{end}}')


for filename in ${files}
do
  escape_filename=$(echo ${filename} | sed s#\\.#\\\\.#)
  ${kubectl} get cm ${cm_name} -o jsonpath="{.data.${escape_filename}}" | sed -E  -e 's/[[:space:]]+$//g' -e 's/\t/    /g' > ${temp_dir}/${filename}
  from_file_params="${from_file_params} --from-file ${temp_dir}/${filename}"
done

new_obj=$(${kubectl} create cm ${cm_name} ${from_file_params} --dry-run=client -o yaml)
new_obj="${new_obj}
${labels}
${annotations}
"

if [ ${force} -eq 1 ]
then
    echo "${new_obj}" | ${kubectl} replace -f -
else
    echo "${new_obj}"
    read -p "Can the configmap be replaced? (y|Y) " confirm
    if [[ "${confirm}" =~ y|Y ]]
    then
        echo "${new_obj}" | ${kubectl} replace -f -
    fi
fi

rm -fr ${temp_dir}
